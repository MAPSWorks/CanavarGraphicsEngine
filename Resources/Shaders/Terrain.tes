#version 410 core
// This code is taken from https://github.com/fede-vaccaro/TerrainEngine-OpenGL and adopted.

layout(triangles, equal_spacing, ccw) in;

uniform mat4 view_matrix;
uniform mat4 projection_matrix;
uniform float amplitude;
uniform float freq;
uniform int octaves;
uniform float power;

uniform vec3 camera_position;
uniform vec3 seed;
uniform vec4 clip_plane;

in vec3 tes_position[];
in vec3 tes_normal[];
in vec2 tes_texture_coord[];

out vec3 fs_world_position;
out vec2 fs_tex_coord;
out vec3 fs_normal;
out float fs_distance_from_position;
out float height;

const mat2 m = mat2(0.8,-0.6,0.6,0.8);

float noise(int ind, int x, int y)
{

const int primes[39] = int[39](
    995615039, 600173719, 701464987,
    831731269, 162318869, 136250887,
    174329291, 946737083, 245679977,
    362489573, 795918041, 350777237,
    457025711, 880830799, 909678923,
    787070341, 177340217, 593320781,
    405493717, 291031019, 391950901,
    458904767, 676625681, 424452397,
    531736441, 939683957, 810651871,
    997169939, 842027887, 423882827,
    192405871, 129403928, 102948294,
    102948203, 912030912, 910204948,
    958730910, 759204855, 859302983);

    int n = x + y * 57;
    n = (n << 13) ^ n;
    int a = primes[ind*3], b = primes[ind*3 + 1], c = primes[ind*3 + 2];
    int t = (n * (n * n * a + b) + c) & 0x7fffffff;
    return float(1.0 - t/1073741824.0);
}

vec2 interpolate_2d(vec2 v0, vec2 v1, vec2 v2)
{
    return vec2(gl_TessCoord.x) * v0 + vec2(gl_TessCoord.y) * v1 + vec2(gl_TessCoord.z) * v2;
}

vec3 interpolate_3d(vec3 v0, vec3 v1, vec3 v2)
{
    return vec3(gl_TessCoord.x) * v0 + vec3(gl_TessCoord.y) * v1 + vec3(gl_TessCoord.z) * v2;
}

// Dummy random
float random2d(vec2 st)
{
     return fract(sin(dot(st.xy, vec2(12.9898, 78.233) + seed.xy)) * 43758.5453123);
}

// Cosine interpolation
float interpolate(float a, float b, float x)
{
    float ft = x * 3.14159265f;
    float f = (1 - cos(ft)) * 0.5;
    return  a * (1 - f) + b * f;
}

float interpolated_noise(float x, float y)
{
    int integer_x = int(floor(x));
    float fractional_x = fract(x);
    int integer_y = int(floor(y));
    float fractional_y = fract(y);
    vec2 random_input = vec2(integer_x, integer_y);
    float a = random2d(random_input);
    float b = random2d(random_input + vec2(1.0, 0.0));
    float c = random2d(random_input + vec2(0.0, 1.0));
    float d = random2d(random_input + vec2(1.0, 1.0));

    vec2 w = vec2(fractional_x, fractional_y);

    // We can use cubic interpolation here
    w = w*w*w*(10.0 + w * (-15.0 + 6.0*w));

    float k0 = a,
    k1 = b - a,
    k2 = c - a,
    k3 = d - c - b + a;

    return k0 + k1*w.x + k2*w.y + k3*w.x*w.y;
}

float perlin(float x, float y)
{
    float persistence = 0.5;
    float total = 0;
    float frequency = 0.005 * freq;
    float ampl = amplitude;
    for (int i = 0; i < octaves; ++i)
    {
        frequency *= 2.;
        ampl *= persistence;
        total += interpolated_noise(x * frequency, y * frequency) * ampl;
    }
    return pow(total, power);
}

float perlin(vec2 st)
{
    float persistence = 0.5;
    float total = 0.0;
    float frequency = 0.005 * freq;
    float ampl = amplitude;
    for (int i = 0; i < octaves; ++i)
    {
        frequency *= 2.0;
        ampl *= persistence;
        vec2 v = frequency*m*st;
        total += interpolated_noise(v.x,v.y) * ampl;
    }

    return pow(total, power);
}


void main()
{
    // Interpolate the attributes of the output vertex using the barycentric coordinates
    fs_tex_coord = interpolate_2d(tes_texture_coord[0], tes_texture_coord[1], tes_texture_coord[2]);
    fs_normal = interpolate_3d(tes_normal[0], tes_normal[1], tes_normal[2]);
    fs_normal = normalize(fs_normal);
    fs_world_position = interpolate_3d(tes_position[0], tes_position[1], tes_position[2]);

    // Displace the vertex along the normal
    float displacement = perlin(fs_world_position.xz);
    fs_world_position += fs_normal * displacement;
    gl_ClipDistance[0] = dot(clip_plane, vec4(fs_world_position, 1.0));
    fs_distance_from_position = distance(fs_world_position, camera_position);
    height = fs_world_position.y;

    gl_Position = projection_matrix * view_matrix * vec4(fs_world_position, 1.0);
}
